아래 내용들을 토대로 내가 정리한 입출력 관련 내용
Scanner와 System.out.println은 많은 입출력이 필요할 때는 속도가 느리다.

입력 관련
1. BufferedReader -> 공백에 없는 입력을 받을 때 사용
2. StringTokenizer -> 공백이 있는 입력을 받을 때 사용

출력 관련
1. BufferedWriter -> 이때, 파라미터로 char 혹은 String을 받기 때문에 숫자를 출력하고 싶으면, String.valueOf()로 감싸야 한다.
                  -> write() 메서드를 여러 번 호출하면 메모리가 과하게 소비된다.
                     따라서 StringBuilder에 추가하여 StringBuilder.toString()을 write() 메서드의 인자로 한 번에 저장하는 것이 메모리와 시간 측면에서 효율적이다.
   - bw.write() : 출력하는 것이 아닌, 출력할 내용을 저장하는 것.
                  이때, 파라미터로 char값 혹은 String을 받기 때문에 숫자를 출력하고 싶으면, String.valueOf()로 감싸야 한다.
   - bw.newLine() : 줄바꿈
   - bw.flush() : 버퍼에 남아있는 데이터를 비운 후, 해당 데이터를 출력 -> 남아있는 데이터라기 보단, write() 메서드로 쌓아둔 내용을 FIFO 형태로 출력하는 메서드.
   - bw.close() : 버퍼에 남아있는 데이터를 비운 후, 해당 데이터를 출력한 후 스트림이 닫힘
                  -> 남아있는 데이터라기 보단, write() 메서드로 쌓아둔 내용을 FIFO 형태로 출력하는 메서드.
                     이 메서드를 호출한 후에는 System.out.println() 로 출력도 안 됨.

static 필드 선언 관련
static 필드를 많이 선언하면 메모리 측면에서 약간의 소비가 있지만 시간 측면에서는 약간 효율적이다.
(혹시 메모리 관련 초과가 난다면 필요 없는 static 필드들을 메서드 내부로 수정하자. or 혹시 시간 초과가 난다면 메서드의 필드를 static 필드로 빼보자!)

========================================================================================================================
System.out.println(""), Scanner 를 사용하여 입출력을 처리하면 시간 소모가 심하다는 단점이 있다.

입력 클래스

1. BufferedReader
BufferedReader를 사용하는 것이 Scanner를 사용하는 것보다 빠르다.

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
String input = br.readLine();

하지만 BufferedReader는 정수를 입력받는 함수를 제공해주지 않기 때문에, 필요한 경우 직접 변환해서 사용해야 한다.

int a = Integer.parseInt(br.readLine());

2.StringTokenizer
StringTokenizer는 공백으로 값이 구분되는 경우에 사용하자.

BufferedReader br = new BufferedReader(new InputStreamReader(System.in());
StringTokenizer st = new StringTokenizer(br.readLine());

int a = Integer.parseInt(st.nextToken());
int b = Integer.parseInt(st.nextToken());
int c = Integer.parseInt(st.nextToken());
위와 같이 사용한다.

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
String inp = br.readLine().split(" ");
위와 같이 처리할 수도 있다. (속도가 비교적 느림)

========================================================================================================================

출력 클래스
BufferedWriter를 사용하는 것이 System.out.println("")에 비해 빠르다. 적은 양의 출력에서는 괜찮지만, 출력량이 많아질 경우 고려해보자.

1. BufferedWriter
BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
bw.write("hello bf!");
bw.newLine();
bw.flush();
bw.close();

- bw.write() : 괄호안의 값을 출력한다. -> 출력하는 것이 아닌, 출력할 내용을 저장하는 것.
이때, 파라미터로 char값 혹은 String을 받기 때문에 숫자를 출력하고 싶으면, String.valueOf()로 감싸야 한다.

- bw.newLine() : 줄바꿈

- bw.flush() : 버퍼에 남아있는 데이터를 비운 후, 해당 데이터를 출력 -> 남아있는 데이터라기 보단, write() 메서드로 쌓아둔 내용을 FIFO 형태로 출력하는 메서드.

- bw.close() : 버퍼에 남아있는 데이터를 비운 후, 해당 데이터를 출력한 후 스트림이 닫힘
               -> 남아있는 데이터라기 보단, write() 메서드로 쌓아둔 내용을 FIFO 형태로 출력하는 메서드. 이 메서드를 호출한 후에는 System.out.println() 로 출력도 안 됨.
  - 해당 스트림을 다시 이용하여 파일에 쓰는 것이 불가능해짐

즉, bw.write() 함수를 통해 버퍼에 값을 저장하고, 출력하고 싶은 경우에 flush() 혹은 close()를 사용해주자.
출력하고 종료할거라면 close()를, 더 출력할 일이 있다면 flush()를 활용하자.

BufferedWriter를 사용한 후에는, 반드시 flush() 혹은 close() 둘 중 하나를 작성해주어야 한다. (버퍼를 비우기 위해)

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

Scanner이나 System.in.read를 사용하는 것이 일반적이나, 코딩테스트용으로 빠르게 입력받기 위해서는 BufferedReader을 사용하며,
StringTokenizer은 공백이 있는 경우 문자열이 공백처리를 땡겨 채우도록 하여 BufferedReader보다 더 빠르다고 한다.
BufferedReader, InputStreamReader은 "java.io"에 속하고 StringTokenizer은 "java.util"에 속한다.

사용 예시
BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
String str = "abc"; //출력 문자열
bw.write(str);
bw.newLine(); //줄바꿈
bw.flush(); //남은 데이터 모두 출력
bw.close(); //출력 스트림 아예 닫힘

StringBuilder sb = new StringBuilder();
sb.append("a");
sb.append("b").append("\n");
System.out.println(sb);

사용 예시
//1
BufferedReader br = new BufferedReader(new InputStreamReadr(System.in));
String [] input = br.readLine().split(" ");
n = Integer.parseInt(input[0]);
m = Integer.parseInt(innput[1]);

for(int i=0; i<n; i++){
    String input2 = br.readLine().split(" ");

    for(int j=0; j<m; j++){
        graph[i][j]=Integer.parseInt(input2[j]);
    }
}

//2
Scanner sc = new Scanner(System.in);

n = sc.nextInt();
m = sc.nextInt();
sc.nextLine();

for(int i=0; i<n; i++){
    for(int j=0; j<m; j++){
        graph[i][j] = sc.nextInt();
    }
}
위 방식은 띄어쓰기가 있는 경우인데, 만약 띄어쓰기 없이 들어간다면 바깥 for문에서 sc.nextLine()이나 br.readline()으로 전체 문자열을 받아준 후에,
안쪽 for문에서 graph[i][j] = str.charAt(j) - '0'을 해주면 된다.

========================================================================================================================
문자열 다루기

- 대문자, 소문자 판별

Character.isLowerCase(x)
Character.isUpperCase(x)

Character.toUpperCase(x)
Character.toLowerCase(x)


- Character 타입 판별

Character.isAlphabetic(x)
Character.isDigit(x)


- 특정 단어의 인덱스 값, 인덱스 값에 위치한 단어
str.indexOf('W');
str.charAt(idx);


- 알파벳만 필터링

str = str.toUpperCase().replaceAll("[^A-Z]", "");


- 문자열 거꾸로

String tmp = StringBuilder(str).reverse().toString();


- 문자열 나누기

str = str.subString(7); //7 이후부터
str = str.subString(5,12); //5부터 12까지


- StringBuffer

StringBuffer sb = new StringBuffer();
sb.append("abcdef");
sb.insert(0, "a"); //해당 인덱스에 해당값 삽입
sb.substring(0,4); //문자열 나누기 0부터 4까지
sb.reverse(); //뒤집기
sb.toString(); //String 형태로 변경


- 필터 조건 : Character타입으로 변환 후에 is 함수 또는 if 조건문 사용
- 중복 문자: indexOf() 활용하면 맨 처음에 발견한 것을 가져옴 -> 중복 제거에 유리함
- String : 불변객체, 새로 참조할때마다 새 메모리 참조. <-> StringBuilder : 가변객체.
- replace : chain형으로 여러번 사용 가능함 ex) tmp.replace("#","1").replace("*","0")
- String -> char : charAt(idx);(한 글자만) or toCharArray()(전체) 다만, 이때 특수문자나 공백도 인덱스에 포함되므로 주의할 것.
- char -> String : valueOf(변수); (char, char[] 둘 다 들어갈 수 있음) or Character.toString(변수); (이때는 char[]은 불가능함)
- StringBuilder의 경우 삭제는 deleteCharAt(인덱스)를 사용할 수 있다.
    - delete(시작인덱스, 끝인덱스)를 사용해서 삭제할 수도 있다.
    - 값을 변경하려면 setCharAt(인덱스, 문자)를 사용할 수 있다.
    - 값을 삽입하는 것은 insert(인덱스, 문자)를 쓸 수 있고, setLength()를 사용해서 문자열 길이를 줄이거나 늘일(뒤가 공백으로 채워진다)수도 있다.


========================================================================================================================
자료구조

- Array

int[] arr = new int[5]; -> 빈 배열
int[] arr = new int[]{1,2,3,4,5}; -> 값 넣어 초기화
int[][] a = new int[2][4] -> 2차원 빈 배열

Array의 경우가 길이가 고정된다. (length)
배열의 복제는 clone()을 사용해줌. 정렬은 sort 사용.
Arrays.copyOfRange(배열명, 시작점, 끝점)으로 배열에서 특정 범위를 자르고 다른 배열에 저장할 수 있음. (시작점 이상 끝점 미만)

String str = "12345";
String[] arr = str.split("");
//[1,2,3,4,5]
이런 방법으로 string -> array도 가능함.


- ArrayList

ArrayList<Integer> ArrList = new ArrayList<Integer>();
복사되는 배열.
addAll(복사할배열)을 사용해서 깊은 복사가 가능함.
인덱스가 있어서 검색에 용이함.
하나씩 가져와서 배열에 넣는 경우, int는 list.get(i).intValue()를 사용해야 함.


- List

List<String> arrList = new ArrayList<>();
add, get, size, contains, remove를 사용할 수 있음. 길이가 가변적.
Collections.sort()를 이용해서 정렬 가능함.


- LinkedList
addFirst, addLast, add, removeFirst, removeLast, remove, clear, size, hasNext, contains를 사용할 수 있다. 검색에는 부적합함.


- Set
중복 허용하지 않음.

hashSet : 순서 필요x
treeSet : 정렬된 값.
LinkedHashSet : 저장 순서 유지함

TreeSet<String> ts = new TreeSet<>();
HashSet<String> hs = new HashSet<>(ts);

add, contains, equals, isEmpty, size를 사용할 수 있다.

  - Set<String> set = new HashSet<String>();
    List<String> menuList = new ArrayList<>(set);
    으로 set->list 변환 가능


- Iterator
반복을 위해서 사용할 수 있음. -> set, map, queue에서 사용 가능


- Stack

Stack<Integer> stk = new Stack<>();


- Heap
Priority Queue 생성자 -> Heap Tree의 형태 구현 가능

PriorityQueue<Item> queue = new PriorityQueue<>(new Comparator<Item>(){
                                                    public int compare(){
                                                        (중략)
                                                    }
                                                }
                                                );

PriorityQueue<Integer> pq = PriorityQueue<Integer>(); //오름차순
PriorityQueue<Integer> pq = PriorityQueue<Integer>(Collections.reverseOrder()); //내림차순

add, remove(가장 앞 원소)를 사용함. minHeap, maxHeap에 접근할 때는 peak을 사용함.


- Queue

Queue<Integer> queue = new LinkedList<>();

add, poll(꺼내기)을 사용할 수 있다.


- Deque

Deque<String> stack = new ArrayDeque<>();
addFirst()(용량 제한이면 exception)
offerFirst() (용량 제한이면 false)
addLast, add, offerLast, removeFirst(비어있으면 exception)
pollFirst(비어있으면 null)
removeLast, pollLast,remove(첫 번째 제거)
poll(첫 번째 제거)
getFirst(제거x, 비어있으면 exception)
peekFirst(제거x, 비어있으면 null)
getLast, peekLast, peek(첫 번째)
removeFirstOccurrence(Object o) (앞에서부터 탐색해서 o와 동일한 첫 엘리먼트 제거.)
removeLastOccurrence(Object o)
element(첫 번째 제거)
addAll
push(앞에 추가)
pop(앞을 제거)
remove(Object o)
contain(Object o)


- Map

HashMap<String, String> map = new HashMap<String, String>

put, get, containsKey, remove, size를 사용할 수 있다.
만약 배열의 인덱스를 int가 아니라 String이나 char으로 지정하고 싶을때는 다음과 같은 방법을 쓸 수 있음.

Map<String, List<Integer>> map = new HashMap<>();

if(map.containsKey(str) == false){
   List<Integer> list = new ArrayList<>();
   list.add(Integer.parseInt(info[4]));
   map.put(str, list);
}
else{
   map.get(str).add(Integer.parseInt(info[4]));
}

HashMap을 Value 기준으로 정렬하는 방식은 다음과 같다.

  - Entry 내장 함수
    Map<String, Integer> map = new HashMap<>();
    map.put("a"", 3);
    map.put("b", 2);
    map.put("c", 1);
    List<Map.Entry<String, Integer>> entryList = new LinkedList<>(map.entrySet());
    entryList.sort(Map.Entry.comparingByValue());

  - comparator
    List.sort(new Comparator<Map.Entry<String, Integer>>(){
        @Override
        public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2){
            return o1.getValue() - o2.getValue(); //오름차순
        }
    }

  - lambda
    entryList.sort((o1,o2) -> map.get(o1.getKey()) - map.get(o2.getKey())));

Collections
max, min, sort, reverse, frequency(갯수)
binarySearch(리스트, 숫자) (최초로 검색된 인덱스, 없다면 숫자보다 큰 최초의 위치를 찾아서 -1을 곱하고 1을 빼서 반환)


========================================================================================================================
정렬
comparator을 통해서 compare 함수를 override해주거나 lambda를 써주면 된다. (혹은 Collections를 활용할 수 있음)

- comparator

Integer[] arr = {1,2,3,4,5};
Arrays.sort(arr, new Comparator<Integer>(){
   @Override
   public int compare(Integer i1, Integer i2){
      return i2-i1;
   }
});

- lambda
이쪽이 더 간단하다.

Integer[] arr = {1,2,3,4,5};
Arrays.sort(arr,(i1,i2) -> i2-i1);

둘 다 return값은 음수, 양수, 0이 될 수 있다. 음수가 리턴되면 오른쪽 인자가 아래로 내려간다.
만약 s1,s2에 대해 s1-s2를 반환한다고 해보자.
이때 s1<s2라면 음수가 리턴되고, 이때 s2가 s1보다 밑으로 내려간다. s1>s2라면 양수가 리턴되고, 그렇다면 s1이 s2보다 밑으로 내려간다.
즉, 오름차순으로 정렬되는 것이다. 내림차순으로 정렬하고 싶다면 반대로 s1,s2에 대해 s2-s1을 반환하면 될 것이다.

- compareTo
비교에는 compareTo를 사용할 수도 있다. 숫자를 사용하면 크다(1), 같다(0), 작다(-1)을 반환하나, 문자의 경우 다양하다.

Integer x= 3;
Integer y = 3;
x.compareTo(y) //-1
x.compareTo(3) //0
x.compareTo(2) //1

String str = "abcd";
str.compareTo("abcd") //0
str.compareTo("ab") //2
str.compareTo("a") //3
str.compareTo("c") //-2
"".compareTo(str) //-4
str.compareTo("zefd") //-25
str.compareTo("zEFd") //-25
str.compareTo("ABCD") //32

문자열의 경우, 기준값에 비교대상이 포함되어있다면 문자열 길이의 차이값을 리턴해주는데, 같은 위치의 문자끼리만 비교하므로 다른 경우에는 아스키값을 기준으로 비교처리를 한다.
전혀 다른 문자열인 경우에도 아스키값을 기준으로 비교처리를 한다. 만약 대소문자를 무시하고 비교해주길 원한다면 compareToIgnorecase()를 사용하면 된다.

========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================

========================================================================================================================
- 입력 받기
Scanner와 BufferedReader 차이

1) Scanner의 버퍼 크기는 1024 chars, BufferedReader는 8192 chars
2) BufferedReader는 문자열을 단순히 읽고 저장하지만 Scanner는 문자열을 구분해서 분석할 수 있다.
3) BufferedReader는 동기화가 지원되어 Thread-safe하고 Scanner는 지원되지 않는다.
4) BufferedReader는 즉시 IOException을 던지지만 Scanner는 숨긴다.

차이 설명
1) 의 특징에 따라, 큰 파일을 읽을 때 BufferedReader가 좋다.
2) 는 둘의 메소드 차이다.

Scanner는 구문기호를 쓸 수 있어서, 아래처럼 사용할 수 있다.

public static void main(String [] args) {
    Scanner sc = new Scanner("Anna Mills/Female/18");
    sc.useDelimiter("/"); // /로 쪼갬
   while(sc.hasNext()) {
       System.out.println(sc.next());
   }
    sc.close();
}

출력 결과
Anna Mills
Female
18

3) 의 특징에 따라, 동기화가 지원되는 BufferedReader는 멀티 스레드에서 안전하고 그렇지 않은 Scanner는 안전하지 않다.
   멀티 스레드는 여러 스레드가 같은 프로세스 내의 공유 자원을 만지는데 여기서 동시에 공유자원에 접근해도 프로그램 실행에 문제가 없어야 한다.
4) 는 그냥 그렇다는 말이다.


- 사용하기
띄어쓰기 유무에 따라 다양하게 사용

1. BufferedReader
(1) 띄어쓰기가 있는 것

입력 받기
5 6
101010
111111
000001
111111
111111

public class Main{
    public static int[][] map = new int[200][200];
    public static int n, m;

   public static void main(String [] args) {
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        //띄어쓰기가 있는 부분 읽기
        String [] input = br.readLine().split(" ");
        n = Integer.parseInt(input[0]);
        m = Integer.parseInt(input[1]);

        //띄어쓰기 있는 부분 읽기
        for(int i = 0; i < n; i++) {
           String input2 = br.readLine();
            for(int j = 0; j < m; j++) {
               map[i][j] = input2.charAt(j) - '0';
            }
        }
    }
}


(2) 띄어쓰기가 없는 것
입력 받기
5 6
1 0 1 0 1 0
1 1 1 1 1 1
0 0 0 0 0 1
1 1 1 1 1 1
1 1 1 1 1 1


public class Main{
    public static int[][] map = new int[200][200];
    public static int n, m;

   public static void main(String [] args) {
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        //띄어쓰기가 있는 부분 읽기
        String [] input = br.readLine().split(" ");
        n = Integer.parseInt(input[0]);
        m = Integer.parseInt(input[1]);

        //띄어쓰기 있는 부분 또 읽기
        for(int i = 0; i < n; i++) {
           String [] input2 = br.readLine().split(" ");
            for(int j = 0; j < m; j++) {
               map[i][j] = Integer.parseInt(input2[j]);
            }
        }
    }
}


2. Scanner
주의할 점은 nextInt()를 한 뒤에 nextLine()을 할 때다.
nextInt()는 \n이나 " "(공백) 바로 직전까지의 숫자를 입력받는다.
그리고 nextLine()은 \n까지 포함해서 입력을 받는다. 그래서 예를 들어 아래와 같이 입력한다면

12
example

실제 구성은 12 \n example인 건데, 여기서 nextInt()를 한 뒤 nextLine을 하면 아래와 같이 받아진다.

nextInt() //개행문자 전까지의 숫자 12가 받아짐
nextLine() //12 뒤에 남은 개행문자가 받아지고 끝
nextLine() //한번 더 해줘야 example이 받아짐.
nextLine()을 한번 더 해서 버퍼 상태를 제거해 줘야 한다!!


(1) 띄어쓰기가 있는 것
입력 받기
5 6
101010
111111
000001
111111
111111

public class Main{
    public static int[][] map = new int[200][200];
    public static int n, m;

   public static void main(String [] args) {
       Scanner sc = new Scanner(System.in);

        n = sc.nextInt();
        m = sc.nextInt();
        sc.nextLine(); //버퍼 비우기

        for(int i = 0; i < n; i++){
           String str = sc.nextLine();
            for(int j = 0; j < m; j++) {
               map[i][j] = str.charAt(i) - '0';
            }
        }
    }
}


(2) 띄어쓰기가 없는 것
입력 받기
5 6
1 0 1 0 1 0
1 1 1 1 1 1
0 0 0 0 0 1
1 1 1 1 1 1
1 1 1 1 1 1


public class Main{
    public static int[][] map = new int[200][200];
    public static int n, m;

   public static void main(String [] args) {
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        //띄어쓰기가 있는 부분 읽기
        n = sc.nextInt();
        m = sc.nextInt();

        //띄어쓰기 있는 부분 또 읽기
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
               map[i][j] = sc.nextInt();
            }
        }
    }
}


========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
입력 클래스
속도 : StringTokenizer >> BufferedReader >> Scanner

1. Scanner
패키지 : java.util
Scanner 클래스는 생성자로 전달되는 대상으로부터 데이터를 추출하는 기능을 제공하는 클래스이다.
띄어쓰기와 개행문자를 경계로 입력 값을 인식하며, 버퍼 사이즈가 1024 char이기 때문에 많은 입력을 필요로 할 경우에는 비효율적이다.

Scanner sc = new Scanner(System.in);

int n = sc.nextInt();
long l = sc.nextLong();
String s = sc.next();
String s = sc.nextLine();


System.in
키보드와 같은 사용자로부터 입력을 받는 표준 입력스트림 객체이며, 반환값은 InputStream이다.


InputStream
또한, InputStream은 입력 스트림으로부터 데이터를 byte 단위로 읽어오는 byte stream이다.


2. BufferedReader
BufferedReader는 인자로 취한 ReaderStream에 버퍼링 기능을 추가한 입력 스트림 클래스이다.
또한, 버퍼를 통해 데이터를 사용자가 요청할 때마다 읽어오는 것이 아니라, 버퍼에 보관 후 사용자가 요청 시 읽어오므로 시간의 부하를 줄일 수 있다.
Scanner와 달리 BufferedReader는 개행문자만 경계로 인식하고 readLine() 메소드를 제공한다. 따라서 입력받은 데이터는 String으로 고정되어 형변환이 필요하다.
만약 공백 단위로 데이터를 가공하려면 String.split()나 StringTokenizer를 사용해야 한다.


BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

String input = br.readLine();
int i = Integer.parseInt(br.readLine());

String[] s = br.readLine().split(" "); // 1 2 3 4 5 한 줄 입력 시 s[0]="1", s[1]="2", ...


InputStreamReader
인자로 InputStream을 취해서 ReaderStream 형태로 변환한다.
변환 시 문자열 인코딩을 줄 수 있다.


ReaderStream
InputStream과 달리 입력스트림에서 데이터를 char 단위로 처리한다.


3. StringTokenizer
StringTokenizer는 BufferedReader와 함께 사용한다.
StringTokenizer의 nextToken() 메소드는 단순히 공백자리를 땡겨 채워준다.

// AAA BB CCC DD 입력 시
BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
StringTokenizer st = new StringTokenizer(br.readLine());

String A = st.nextToken(); // "AAA"
String B = st.nextToken(); // "BB"
String C = st.nextToken(); // "CCC"
String D = st.nextToken(); // "DD"


split() 메소드는 정규식 기반으로 자르는 메소드라 내부구조가 복잡하다.
따라서 nextToken() 메소드는 단순히 공백자리를 땡겨 채우기 떄문에 속도가 훨씬 빠르다.
즉, 공백을 기준으로 자르는 경우에는 StringTokenizer의 nextToken() 메소드를 사용하는 것이 효율적이다.


출력 클래스
1. System.out.println()
2. BufferedWriter
BufferedWriter는 System.out.println()와 달리 출력과 개행을 동시에 해주지 않기 때문에, 개행을 위해선 newLine() 혹은 bw.write("\n")을 사용해야 한다.
또한, BufferedWriter는 버퍼를 사용하기 때문에 flush()와 close()를 사용해야 한다.


BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
String str = "abcdef";

bw.write(s); // 출력
bw.newLine(); // 줄바꿈
bw.flush(); // 남아있는 데이터 모두 출력
bw.close();

close() ->   flush() 이후에 스트림을 닫는다.
flush() ->   스트림을 비운다.
newLine() ->   개행 문자 역할을 한다.
write(char[] buf, int offset, int length) ->   버퍼 offset 위치부터 length 크기만큼 출력한다.
write(int c) ->   한 글자를 출력한다.
write(String s, int offset, int length) ->   문자열에서 offset에서부터 일정 길이만큼 출력한다.


3. StringBuilder
String vs StringBuffer/StringBuilder
String ->   불변 속성을 가진다. 따라서 따라서 문자열 추가, 삭제, 수정 등의 연산이 자주 일어나는 경우에 String을 사용하면, 힙 메모리에 많은 Garbage가 생성되고, 프로그램의 성능에 좋지 않다.
StringBuffer/StringBuilder ->   불변 속성을 가지지 않는다. 따라서 문자열 연산이 자주 일어나는 경우에 적합하다.


StringBuffer vs StringBuilder
StringBuffer ->   동기화를 지원하여 멀티 스레드 환경에서 안전하다.
StringBuilder ->   동기화를 지원하지 않아 멀티 스레드 환경에 사용하기 적합하지 않다. 대신 단일 스레드에서는 StringBuffer보다 성능이 뛰어나다.

결론적으로 문자열의 연산이 자주 일어나는 단일 스레드 환경에선 StringBuilder를 사용하는 것이 유리하다.


StringBuilder sb = new StringBuilder();
sb.append("a");
sb.append("b").append(" ");
sb.append("c").append("\n");
System.out.println(sb);


StringBuilder append(String s) ->   뒤에 문자열을 추가한다.
StringBuilder delete(int start , int end) ->   특정 인덱스부터 인덱스까지 삭제한다.
StringBuilder insert(int offet, any primitive of a char[]) ->   문자를 삽입한다.
StringBuilder replace(int start , int end , String s) ->   일부를 String 객체로 치환한다.
StringBuilder reverse() ->   순서를 뒤집는다.
StringBuilder setCharAt(int index , char ch) ->   주어진 문자를 치환한다.
StringBuilder indexOf(String s) ->   값이 어느 인덱스에 들어있는지 확인한다.
StringBuilder subString(int start, int end) ->   start와 end 사이의 값을 잘라온다.


========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================
========================================================================================================================